var searchIndex = JSON.parse('{\
"minerva_voucher":{"doc":"This crate implements a compact CBOR-encoded voucher …","t":[13,13,13,13,13,13,13,13,13,8,4,13,13,8,13,3,4,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,14,14,12,12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12],"n":["CborFailure","CoseFailure","ES256","ES384","ES512","InvalidArgument","MalformedInput","MissingAttributes","PS256","Sign","SignatureAlgorithm","SigningFailed","UnexpectedCborType","Validate","ValidationFailed","Voucher","VoucherError","attr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","debug","dump","eq","eq","eq","fmt","fmt","fmt","from","from","from","get","get_signature","get_signer_cert","init_psa_crypto","into","into","into","is_vch","is_vrq","iter","len","ne","ne","new_vch","new_vrq","remove","serialize","set","set_signer_cert","sign","sign","take","to_owned","to_owned","to_sign","to_validate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","validate","vch","vrq","0","0","ATTR_ASSERTION","ATTR_CREATED_ON","ATTR_DOMAIN_CERT_REVOCATION_CHECKS","ATTR_EXPIRES_ON","ATTR_IDEVID_ISSUER","ATTR_LAST_RENEWAL_DATE","ATTR_NONCE","ATTR_PINNED_DOMAIN_CERT","ATTR_PINNED_DOMAIN_PUBK","ATTR_PINNED_DOMAIN_PUBK_SHA256","ATTR_PRIOR_SIGNED_VOUCHER_REQUEST","ATTR_PROXIMITY_REGISTRAR_CERT","ATTR_PROXIMITY_REGISTRAR_PUBK","ATTR_PROXIMITY_REGISTRAR_PUBK_SHA256","ATTR_SERIAL_NUMBER","Assertion","Assertion","Attr","AttrDisc","CreatedOn","DomainCertRevocationChecks","ExpiresOn","IdevidIssuer","LastRenewalDate","Logged","Nonce","PinnedDomainCert","PinnedDomainPubk","PinnedDomainPubkSha256","PriorSignedVoucherRequest","Proximity","ProximityRegistrarCert","ProximityRegistrarPubk","ProximityRegistrarPubkSha256","SerialNumber","Verified","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","disc","eq","eq","fmt","fmt","from","from","into","into","into_yang","ne","to_owned","to_owned","to_sid_disc","try_from","try_from","try_into","try_into","type_id","type_id","value","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","Array","Bytes","CborType","CoseError","DecodingFailure","False","Integer","InvalidArgument","LibraryFailure","MalformedInput","Map","MissingHeader","Null","SignedInteger","SigningFailed","String","StringAsBytes","Tag","True","Undefined","UnexpectedHeaderValue","UnexpectedTag","UnexpectedType","Unimplemented","UnknownSignatureScheme","VerificationFailed","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","content_comp","content_comp_permissive","decode","eq","eq","fmt","fmt","from","from","into","into","ne","partial_cmp","serialize","sig_one_struct_bytes_from","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","1"],"q":["minerva_voucher","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minerva_voucher::VoucherError","","minerva_voucher::attr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minerva_voucher::attr::Attr","","","","","","","","","","","","","","","minerva_voucher::debug","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minerva_voucher::debug::CborType","","","","","","","",""],"d":["","","","","","","","","","Used to COSE-sign a <code>Voucher</code>.","An enum identifying supported signature algorithms. …","","","Used to COSE-validate a <code>Voucher</code>.","","A structure implementing both “Voucher Request” and “…","Errors that can be returned from <code>Voucher</code> functions.","Enums and constants for voucher attributes.","","","","","","","","","","","","Prints internal representation of the voucher for …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the attribute in the voucher, if …","Returns a tuple of references to the signature and its …","Returns a reference to the signer certificate in the …","Initializes the PSA cryptography API context.  Call this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the voucher is a “Voucher” instance.","Returns <code>true</code> if the voucher is a “Voucher Request” …","Gets an iterator that visits the attributes in the voucher.","Returns the number of attributes in the voucher.","","","Creates a new, empty “Voucher” instance.","Creates a new, empty “Voucher Request” instance.","Removes an attribute from the voucher. Returns whether the …","Encodes the voucher into CBOR. Returns a CBOR byte string.","Adds an attribute to the voucher, replacing the existing …","Adds a singer certificate to the voucher. Returns a <code>mut</code> …","","Signs the voucher using a PEM-encoded private key based on …","Removes and returns the attribute in the voucher, if any, …","","","Interfaces with meta data required for signing the voucher.","Interfaces with meta data required for validating the …","","","Decodes a CBOR-encoded voucher.  Returns a <code>Voucher</code>.","","","","","","","","","Validates the voucher using a PEM-encoded certificate. If …","Creates a “Voucher” instance with a known list of …","Creates a “Voucher Request” instance with a known list …","","","","","","","","","","","","","","","","","","An enum identifying values of the “assertion” field …","","An enum identifying voucher attributes.","The voucher attribute enum discriminant type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors that can be returned from COSE functions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sorting for maps: RFC 7049 Section 3.9","","","Read the CBOR structure in bytes and return it as a …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Serialize a Cbor object. NB: if the object to be …","","","","","","","","","","","","","","","","","",""],"i":[2,2,1,1,1,2,2,2,1,0,0,2,2,0,2,0,0,0,1,2,3,1,2,3,1,2,1,2,0,3,1,2,3,1,2,3,1,2,3,3,3,3,0,1,2,3,3,3,3,3,2,3,3,3,3,3,3,3,26,3,3,1,2,3,3,1,2,3,3,1,2,3,1,2,3,27,3,0,0,28,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,10,10,10,10,10,17,10,10,10,10,10,17,10,10,10,10,17,17,10,17,10,17,10,17,10,10,17,10,17,10,17,10,17,10,10,10,17,10,10,17,10,17,10,17,10,17,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,21,21,0,0,20,21,21,20,20,20,21,20,21,21,20,21,21,21,21,21,20,20,20,20,20,20,20,21,20,21,20,21,20,21,21,0,0,0,20,21,20,21,20,21,20,21,21,21,21,0,20,21,20,21,20,21,20,21,45,46,47,48,49,50,51,52,47],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],0,[3],[[1,1],4],[[2,2],4],[[3,3],4],[[1,5],[[7,[6]]]],[[2,5],8],[[3,5],8],[[]],[[]],[[]],[[3,9],[[11,[10]]]],[3,11],[3,11],[[]],[[]],[[]],[[]],[3,4],[3,4],[3,12],[3,13],[[2,2],4],[[3,3],4],[[],3],[[],3],[[3,9],4],[3,[[7,[[15,[14]],2]]]],[[3,10],3],[3,3],[1,[[7,[2]]]],[[3,1],[[7,[3,2]]]],[[3,9],[[11,[10]]]],[[]],[[]],[[3,1]],[3],[[],7],[[],7],[[],[[7,[3]]]],[[],7],[[],7],[[],7],[[],7],[[],16],[[],16],[[],16],[11,[[7,[2]]]],[[3,11],[[7,[3,2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,17],[10,10],[[]],[[]],[10,9],[[17,17],4],[[10,10],4],[[17,5],8],[[10,5],8],[[]],[[]],[[]],[[]],0,[[10,10],4],[[]],[[]],[[9,4],[[11,[18]]]],[[],7],[[],7],[[],7],[[],7],[[],16],[[],16],[17,19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[20,20],[21,21],[[]],[[]],[[21,21],22],[[],4],[[],4],[[],[[7,[21,23]]]],[[20,20],4],[[21,21],4],[[20,5],[[7,[6]]]],[[21,5],[[7,[6]]]],[[]],[[]],[[]],[[]],[[21,21],4],[[21,21],[[11,[22]]]],[21,[[15,[14,24]]]],[25,[[15,[14]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],16],[[],16],0,0,0,0,0,0,0,0,0],"p":[[4,"SignatureAlgorithm"],[4,"VoucherError"],[3,"Voucher"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[6,"AttrDisc"],[4,"Attr"],[4,"Option"],[8,"Iterator"],[15,"usize"],[15,"u8"],[3,"Vec"],[3,"TypeId"],[4,"Assertion"],[15,"u64"],[15,"str"],[4,"CoseError"],[4,"CborType"],[4,"Ordering"],[4,"CborError"],[3,"Global"],[3,"BTreeMap"],[8,"Sign"],[8,"Validate"],[13,"CborFailure"],[13,"CoseFailure"],[13,"Assertion"],[13,"CreatedOn"],[13,"DomainCertRevocationChecks"],[13,"ExpiresOn"],[13,"IdevidIssuer"],[13,"LastRenewalDate"],[13,"Nonce"],[13,"PinnedDomainCert"],[13,"PinnedDomainPubk"],[13,"PinnedDomainPubkSha256"],[13,"PriorSignedVoucherRequest"],[13,"ProximityRegistrarCert"],[13,"ProximityRegistrarPubk"],[13,"ProximityRegistrarPubkSha256"],[13,"SerialNumber"],[13,"Integer"],[13,"SignedInteger"],[13,"Tag"],[13,"Bytes"],[13,"String"],[13,"StringAsBytes"],[13,"Array"],[13,"Map"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
